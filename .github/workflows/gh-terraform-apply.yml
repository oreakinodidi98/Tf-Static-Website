name: 'Terraform Apply'
# used GH copilot chat to create this template for me
# action that provisions infrastructure to Azure
#event that will trigger action 
on:
    push:
        branches:
            - main
        paths:
            - '**.tf'
    workflow_dispatch:
#env variables
env:
    ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
    ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
    ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
    ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
    TF_LOG: INFO
    TF_INPUT: false
    TF_IN_AUTOMATION: true

permissions:
  contents: read
#job section -> single job called terraform
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    #use bash shell regardless of github actions runner 
    defaults:
      run:
        shell: bash
# clone repo to runner machine 
    steps:
    - name: Checkout
      uses: actions/checkout@v3
# setup terraform on runner machine
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false
# display the event that triggered the workflow 
    - name: Display Event
      run: echo "The ${{ github.event_name }} event was triggered on ${{ github.event.repository.name }} with ${{ github.event.commits[0].id }}"
#initialize terraform
    - name: Terraform Init
      run: terraform init
# apply terraform
    - name: Terraform Apply
      run: terraform apply -auto-approve
# export terraform outputs to file
    - name: Export Terraform Outputs
      id: tf
      run: |
          echo "API_KEY=$(terraform output -raw api_key)" > terraform_vars.txt
          echo "WEBAPP_NAME=$(terraform output -raw webapp_name)" >> terraform_vars.txt
          echo "OUTPUT_ID=$(terraform output -raw id)" >> terraform_vars.txt
          echo "DOMAIN_NAME=$(terraform output -raw domain_name)" >> terraform_vars.txt
          echo "RESOURCE_GROUP=$(terraform output -raw resource_group_name)" >> terraform_vars.txt
    - name: Upload Terraform Variables
      uses: actions/upload-artifact@v2
      with:
          name: terraform_vars_file
          path: output/static/terraform_vars.txt
# Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v1.4.6
      with:
        client-id: ${{ secrets.ARM_CLIENT_ID }}
        tenant-id: ${{ secrets.ARM_TENANT_ID }}
        subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
# Upload the file to Azure Blob Storage
    - name: Upload to Azure Blob Storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az storage blob upload --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --account-key ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }} --name terraform_vars.txt --type block --file output/static/terraform_vars.txt --container-name ${{ secrets.CONTAINER_NAME }} 